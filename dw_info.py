# -*- coding:gbk -*-
"""
新建基础库
"""

from openpyxl import load_workbook
import requests
import os


class DW_INFO:

    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',
            # 'Cookie': 'SESSION=ZTcxYzNjYmQtYzUyMS00NzBmLWJmY2UtOTE1YzFiODBhYWIz; JSESSIONID=5A5583C8C9D700B0CE1696AEC32058D2',
            "Access-Token": "716419b3-bdbb-4e72-8871-9cf4307066bd",
            # "Content-Type": "application/json;charset=UTF-8"
        }
        self.dic = {
            # "序号": "",
            "单位名称": "",
            "单位地址": "",
            "统一信用代码": "",	
            "组织机构代码": "",
            "单位类型": "",
            "所属行业": "",
            "产业级别": "",
            "单位状态": "",
            "注销标志": ""
        }
        self.dwlx = {
            '10': '企业',
            '20': '事业单位',
            '21': '全额拨款事业单位',
            '22': '差额拨款事业单位',
            '23': '自收自支事业单位',
            '30': '机关',
            '40': '社会团体',
            '50': '民办非企业单位',
            '60': '城镇个体工商户',
            '70': '再就业服务中心',
            '90': '其他'
        }
        self.sshy = {
            '0100': '农、林、牧、渔业',
            '0101': '农业',
            '0102': '林业',
            '0103': '畜牧业',
            '0104': '渔业',
            '0105': '农、林、牧、渔服务业',
            '0200': '采矿业',
            '0206': '煤炭开采和洗选业',
            '0207': '石油和天然气开采业',
            '0208': '黑色金属矿采选业',
            '0209': '有色金属矿采选业',
            '0210': '非金属矿采选业',
            '0211': '其他采矿业',
            '0300': '制造业',
            '0313': '农副食品加工业',
            '0314': '食品制造业',
            '0315': '饮料制造业',
            '0316': '烟草制品业 ',
            '0317': '纺织业',
            '0318': '纺织服装、鞋、帽制造业',
            '0319': '皮革、毛皮、羽毛（绒）及其制品业',
            '0320': '木材加工及木、竹、藤、棕、草制品业',
            '0321': '家具制造业 ',
            '0322': '造纸和纸制品业 ',
            '0323': '印刷业和记录媒介的复制',
            '0324': '文教体育用品制造业',
            '0325': '石油加工、炼焦及核燃料加工业 ',
            '0326': '化学原料及化学制品制造业',
            '0327': '医药制造业 ',
            '0328': '化学纤维制造业',
            '0329': '橡胶制品业',
            '0330': '塑料制品业',
            '0331': '非金属矿物制品业',
            '0332': '黑色金属冶炼及压延加工业 ',
            '0333': '有色金属冶炼及压延加工业 ',
            '0334': '金属制品业 ',
            '0335': '通用设备制造业',
            '0336': '专用设备制造业 ',
            '0337': '交通运输设备制造业',
            '0339': '电气机械及器材制造业 ',
            '0340': '通信设备、计算机及其他电子设备制造业',
            '0341': '仪器仪表及文化、办公用机械制造业',
            '0342': '工艺品及其他制造业',
            '0343': '废弃资源和废旧材料回收加工业  ',
            '0400': '电力、燃气及水的生产和供应业',
            '0444': '电力、热力的生产和供应业',
            '0445': '燃气生产和供应业  ',
            '0446': '水的生产和供应业  ',
            '0500': '建筑业',
            '0547': '房屋和土木工程建筑业',
            '0548': '建筑安装业',
            '0549': '建筑装饰业',
            '0550': '其他建筑业',
            '0600': '交通运输、仓储和邮政业',
            '0651': '铁路运输业',
            '0652': '道路运输业',
            '0653': '城市公共交通业',
            '0654': '水上运输业',
            '0655': '航空运输业 ',
            '0656': '管道运输业 ',
            '0657': '装卸搬运和其他运输服务业',
            '0658': '仓储业 ',
            '0659': '邮政业',
            '0700': '信息传输、计算机服务和软件业',
            '0760': '电信和其他信息传输服务业',
            '0761': '计算机服务业',
            '0762': '软件业',
            '0800': '批发和零售业',
            '0863': '批发业',
            '0865': '零售业',
            '0900': '住宿和餐饮业',
            '0966': '住宿业',
            '0967': '餐饮业',
            '1000': '金融业',
            '1068': '银行业',
            '1069': '证券业',
            '1070': '保险业',
            '1071': '其他金融活动',
            '1100': '房地产业',
            '1172': '房地产业',
            '1200': '租赁和商务服务业',
            '1271': '租赁业',
            '1272': '商务服务业',
            '1300': '科学研究、技术服务和地质勘查业',
            '1375': '研究与试验发展',
            '1376': '专业技术服务业',
            '1377': '科技交流和推广服务业',
            '1378': '地质勘查业',
            '1400': '水利、环境和公共设施管理业',
            '1479': '水利管理业',
            '1480': '环境管理业',
            '1481': '公共设施管理业',
            '1500': '居民服务和其他服务业',
            '1582': '居民服务业',
            '1583': '其他服务业',
            '1600': '教育',
            '1684': '教育',
            '1700': '卫生、社会保障和社会福利业',
            '1785': '卫生',
            '1786': '社会保障业',
            '1787': '社会福利业',
            '1800': '文化、体育和娱乐业',
            '1888': '新闻出版业',
            '1889': '广播、电视、电影和音像业',
            '1890': '文化艺术业',
            '1891': '体育',
            '1892': '娱乐业',
            '1900': '公共管理和社会组织',
            '1993': '中国共产党机关',
            '1994': '国家机构',
            '1995': '人民政协和民主党派',
            '1996': '群众团体、社会团体和宗教组织',
            '1997': '基层群众自治组织',
            '2000': '国际组织',
            '2098': '国际组织'
        }
        self.cyjb = {'1': '第一产业', '2': '第二产业', '3': '第三产业', '4': '其它'}
        self.dwzt = {'1': '登记在册', '2': '破产', '3': '注销', '4': '被兼并', '9': '其他'}
        self.zxbz = {'0': '已注销', '1': '正常'}

    def req_info(self, i):
        url = 'http://10.64.2.100:30010/hljjy/lpleaf6-employment/api/aa/a/a/queryAb01Page?pageNo={}'.format(i)
        dic = {
            "aab004": "鸡西",
            "aae119": "1"
        }
        res = requests.post(url=url, json=dic, headers=self.headers)
        print(f'{i}-{res.status_code}')
        # print(res.json())
        data = res.json().get("data", {})
        data_list = data.get("list", [])
        datas = []
        for data in data_list:
            dic_bak = self.dic
            xydm = data.get('aab998') if data.get('aab998') else ''
            # print(xydm)
            dic_bak["单位名称"] = data.get('aab004')
            dic_bak["单位地址"] = data.get('aae006')
            dic_bak["统一信用代码"] = xydm
            dic_bak["组织机构代码"] = data.get('aab003') if data.get('aab003') else xydm[8:17]
            dic_bak["单位类型"] = self.dwlx.get(data.get('aab019', ''), '')
            dic_bak["所属行业"] = self.sshy.get(data.get('aab022', ''), '')
            dic_bak["产业级别"] = self.cyjb.get(data.get('aab054', ''), '')
            dic_bak["单位状态"] = self.dwzt.get(data.get('aae119', ''), '')
            dic_bak["注销标志"] = self.zxbz.get(data.get('yae429', ''), '')
            datas.append(list(dic_bak.values()))
        return datas
    
    def run(self):
        path = os.path.join(os.path.dirname(__file__), '单位信息.xlsx')
        wb = load_workbook(path)
        ws = wb.active
        for i in range(1, 1274):
            datas = self.req_info(i)
            self.write(ws, datas)
            wb.save(path)
        wb.close()
    
    def write(self, ws, datas):
        xh = max([i.value if isinstance(i.value, int) else 0 for i in ws['A'] if i.value], default=0)
        for i, data in enumerate(datas, 1):
            ws.append([xh + i] + data)
            

if __name__ == "__main__":
    dw = DW_INFO()
    dw.run()

